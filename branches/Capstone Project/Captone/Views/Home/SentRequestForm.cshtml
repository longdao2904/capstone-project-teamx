@{
    ViewBag.Title = "Yêu cầu chuyển phát";
    Layout = "~/Views/Shared/_LayoutCustomer.cshtml";
    var username = (string)Session["USERNAME"];
}
@model IEnumerable<Captone.Models.ManageFee>

@using Captone.Models
<link href="~/Content/Css/validate.css" rel="stylesheet" />
<script src="~/Scripts/ValidateForm.js"></script>
<script src="~/Scripts/jquery.validate.js"></script>

<input type="hidden" value="@username" id="session"/>
<div>
    <form id="PostRequestForm" method="POST" action="/Home/PostRequest">
        <div class="col-md-7" id="left">
            <input type="text" value="@DateTime.Now" name="DateRequest" style="display: none"/>
            <div style="margin-left: 3%;">
                <!-- Only required for left/right tabs -->
                <ul class="nav nav-tabs">
                    <li class="active"><a href="#tab1" data-toggle="tab">Thông tin cơ bản</a></li>
                </ul>
                <br />
                <div class="tab-content">
                    <div class="tab-pane active" id="tab1">
                        <div class="form-control-group">
                            <label class="control-label" for="username">Tên Người Gửi</label>
                            <br />
                            <input type="text" name="username" value="" style="position: absolute" class="form-control" id="username" autofocus />
                            <br/>
                              <br/>
                        </div>

                        <div class="form-control-group">
                            <label class="control-label" for="AddressOfSender">Địa Chỉ Người Gửi</label>
                            <br />
                            <input type="text" name="SenderAddress" style="position: absolute" placeholder="Địa chỉ, Quận/huyện, Tỉnh thành" id="AddressOfSender" onchange="SuggestAddress()" class="form-control" />
                            <input type="text" id="locaAddress" style="display: none" />
                              <br/>
                              <br/>
                        </div>
                        <div class="bub-container">
                            <input type="checkbox" id="bulb" class="light" onclick="showPopUp()" />
                            <label for="bulb" class="bulbs"></label>
                        </div>

                        <div class="form-control-group">
                            <label class="control-label" for="SenderPhone">Điện Thoại Người Gửi</label>
                            <br />
                            <input type="text" name="SenderPhone" style="position: absolute"  class="form-control" id="SenderPhone" />
                              <br/>
                              <br/>
                        </div>

                        <div class="form-control-group">
                            <label class="control-label" for="ReceiverName">Tên Người Nhận</label>
                            <br />
                            <input type="text" name="ReceiverName" style="position: absolute"  class="form-control" id="ReceiverName" />
                            <br/>
                            <br/>
                        </div>
                        <div class="form-control-group">
                            <label class="control-label" for="ReceiverAddress">Địa Chỉ Người Nhận</label>
                            <br />
                            <input type="text" name="ReceiverAddress" placeholder="Địa chỉ, Quận/huyện, Tỉnh thành" style="position: absolute" id="AddressOfReceiver" onchange="SuggestToLocation()" class="form-control" />
                            <input type="text" id="ToAddress" style="display: none" />
                            <br/>
                            <br />
                        </div>
                        <div class="bub-container3">
                            <input type="checkbox" id="bulb3" class="light" onclick="showLocation()" />

                            <label for="bulb3" class="bulbs"></label>
                        </div>
                        <div class="form-control-group">
                            <label class="control-label" style="width: 200px;"for="ReceiverPhone">Điện Thoại Người Nhận</label>
                           
                            <input type="text" name="ReceiverPhone" style="position: absolute" id=""class="form-control" />
                            <br/>
                            <br/>
                        </div>
                    </div>
                </div>
            </div>
        </div>


        <div class="col-md-7" id="right" style="margin-left: 53%; position: absolute;">
            <div>
                <!-- Only required for left/right tabs -->
                <ul class="nav nav-tabs">
                    <li class="active"><a href="#tab1" data-toggle="tab">Thông tin sản phẩm</a></li>
                </ul>
                <br />
                <div class="tab-content">
                    <div class="tab-pane active" id="tab1">
                        <div class="form-control-group">
                            <label class="control-label" for="EstimateWeight">Khối Lượng Ước Tính (kg)</label>
                            <br/>
                            <select id="Weigh" name="EstimateWeight" style="position: absolute" class="form-control">
                                <option></option>
                                @foreach (var item in Model)
                                {   
                                    <option value="@item.MinWeight - @item.MaxWeight">@item.MinWeight - @item.MaxWeight</option>
                        
                                }
                            </select>
                            <input type="text" id="FeeID" name="FeeID" value="" style="display: none" />

                            <input type="text" id="FromLocation" name="FromLocation" value="" name="FromLocation" style="display: none" />
                            <input type="text" id="ToLocation" name="ToLocation" value="" style="display: none" />
                            <br/>
                            <br/>
                        </div>
                        <div class="form-control-group">
                            <label class="control-label" for="Height">Cao (cm)</label>
                           <br/>
                            <input type="text" name="Height" style="position: absolute" class="form-control" id="Height" onchange="checkHeight();"/>
                        <br/>
                            <br/>
                         </div>
                        <div class="form-control-group">
                            <label class="control-label" for="Length">Dài (cm)</label>
                            <br/>
                            <input type="text" style="position: absolute" name="Length"class="form-control" id="Length" onchange="checkLength();" />
                            <br/>
                            <br/>
                        </div>
                        <div class="form-control-group">
                            <label class="control-label" for="Width">Rộng (cm)</label>
                            <br/>
                            <input type="text" name="Width" class="form-control" style="position: absolute" id="Width" onchange="checkPackage();"/>
                            <br/>
                            <br/>
                        </div>
                    </div>
                    <div id="check"></div>
                    <div class="form-control-group">
                        <label class="control-label" for="EstimateVolume">Thể Tính Ước Tính(dm3)</label>
                        <br />
                        <input type="text"  class="form-control" name="EstimateVolume" id="Volume" readonly="readonly"/>
                    </div>
                    <div style="margin-top: 5px;">
                        <div id="SuggestFee">
                        </div>
                    </div>
                    <div class="form-control-group">
                        <label class="control-label" for="TypeOfPayment">Phương thức thanh toán</label>
                        <br />
                        <select name="TypeOfPayment" style="position: absolute" id="" class="form-control">
                            <option></option>
                            <option value="Tiền mặt">Tiền mặt</option>
                            <option value="Chuyển khoản">Chuyển khoản</option>
                        </select>
                        <br/>
                        <br/>
                    </div>
                </div>
            </div>
        </div>
<div class="button-location">
    <button type="submit" class="btn btn-lg btn-success" id="sendmessage" style="margin-top: 600px;">Hoàn Tất</button>
</div>

</form>
</div>



<script type="text/javascript">
    window.onload = getUserInfo();
    function getUserInfo() {
        var username = document.getElementById('session').value;
        $.ajax({
            url: "/Home/getUserInfo",
            type: "POST",
            data: {username : username},
            success: function (result) {
                document.getElementById('username').value = result.FirstName + " " + result.Lastname;
                document.getElementById('AddressOfSender').value = result.Address;
                document.getElementById('SenderPhone').value = result.PhoneNumber;
            }
        });
    }
    function checkLength() {
        var length = document.getElementById("Length").value;
        $.ajax({
            url: "/Home/checkLength",
            type: "POST",
            data: { length: length },
            success: function (result) {
                if (result.check) {
                    $("#check").html("");
                }
                else {
                    $("#check").html("<div class='alert-message error'>Kích thước món hàng của bạn vượt quá sức chứa của xe !!</div>");
                }
            }
        });
    }
    function checkHeight() {
        var height = document.getElementById("Height").value;
        $.ajax({
            url: "/Home/checkHeight",
            type: "POST",
            data: { height: height },
            success: function (result) {
                if (result.check) {
                    $("#check").html("");
                }
                else {
                    $("#check").html("<div class='alert-message error'>Kích thước món hàng của bạn vượt quá sức chứa của xe !!</div>");
                }
            }
        });
    }
    function checkPackage() {
        var length = document.getElementById("Length").value;
        var height = document.getElementById("Height").value;
        var width = document.getElementById("Width").value;
        var volume = (length * height * width);
        
        $.ajax({
            url: "/Home/checkPackage",
            type: "POST",
            data: { length: length, height: height, width: width },
            success: function (result) {
                if (result.check) {
                    $("#check").html("");
                    getVolume(volume);
                }
                else {
                    $("#check").html("<div class='alert-message error'>Món hàng của bạn vượt quá sức chứa của xe !!</div>");
                }
            }
        });
    }
    function getVolume(volume) {
        $.ajax({
            url: "/Home/getVolume",
            type: "POST",
            data: { volume: volume },
            success: function (result) {
                var disVolume = result.MinVolume + " - " + result.MaxVolume;
                $("#Volume").val(disVolume);
                CalculateFee();
            }
        });
    }
    function feeChange() {
        var e = document.getElementById("Weigh");
        var v = document.getElementById("Volume");
        var strUser = e.options[e.selectedIndex].value;
        var textWeigh = e.options[e.selectedIndex].text;
        var textVolume = v.options[e.selectedIndex].text;
        document.getElementById("EstimateWeight").value = textWeigh;
        document.getElementById("EstimateVolume").value = textVolume;
        document.getElementById("FeeID").value = strUser;
    }

    function showPopUp() {
        var bulb = document.getElementById("bulb").checked;
        if (bulb) {
            //when bulb turn on
            GoogleMaker();
            checkStation();
            $("#hide").focus();
        } else {
            document.getElementById("map").innerHTML = "";
        }
    }

    function showGoogleMap() {
        var bulb = document.getElementById("bulb2").checked;
        if (bulb) {
            showMap();
        } else {
            document.getElementById("hide").innerHTML = "";
        }
    }
    function showLocation() {
        var bulb = document.getElementById("bulb3").checked;
        if (bulb) {
            MakerLocation();
            ToLocation();
            $("#hide").focus();
            $('.bub-container2').show();
        } else {
            document.getElementById("map").innerHTML = "";
        }

    }
    function SuggestAddress() {

        var address = document.getElementById("AddressOfSender").value;
        if (address != null) {
            StationMaker();
            $('.bub-container').show();

        } if (address == "") {
              $('.bub-container').hide();
              document.getElementById("bulb").checked = false;
          }
    }

    function SuggestToLocation() {
        var address = document.getElementById("AddressOfReceiver").value;
        if (address != null) {
            ToLocationMaker();
            $('.bub-container3').show();
        } if (address == "") {
              $('.bub-container3').hide();
              document.getElementById("bulb3").checked = false;

          }

    }
    //$(function () {
    //    SetWeigh();
    //});
    function showMap() {
        var sender = document.getElementById('AddressOfSender').value;
        var receiver = document.getElementById('AddressOfReceiver').value;
        var directionsService = new google.maps.DirectionsService();
        var directionsDisplay = new google.maps.DirectionsRenderer();
        $("#description").hide();
        $("#shortest").hide();
        var myOptions = {
            zoom: 7,
            mapTypeId: google.maps.MapTypeId.ROADMAP
        }

        var map = new google.maps.Map(document.getElementById("map"), myOptions);
        directionsDisplay.setMap(map);

        var request = {
            origin: sender + '',
            destination: receiver + '',
            travelMode: google.maps.DirectionsTravelMode.DRIVING
        };

        directionsService.route(request, function (response, status) {
            if (status == google.maps.DirectionsStatus.OK) {

                // Display the distance:
                document.getElementById('distance').innerHTML = "Khoảng cách: " +
                    Math.round((response.routes[0].legs[0].distance.value) * 1.609344 / 1000) + " km";

                // Display the duration:
                document.getElementById('duration').innerHTML = "Thời gian: " +
                    Math.round((response.routes[0].legs[0].duration.value) / 3600) + " giờ";
                directionsDisplay.setDirections(response);
            }
        });
    }
    function showPop() {
        $('.pop').show();
    }
    function hid() {
        $('.pop').hide();
    }

    function getPriceRoute() {
        var priceRoute;
        var Sender = document.getElementById("AddressOfSender").value;
        var getCountry = Sender.split(",");
        var countrySender = getCountry[getCountry.length - 1];

        if (countrySender.trim() == "TP Hồ Chí Minh" || countrySender.trim() == "Hồ Chí Minh" || countrySender.trim() == "hồ chí minh") {
            countrySender = "Sài Gòn";
        }

        var Receiver = document.getElementById("AddressOfReceiver").value;
        var getCountry2 = Receiver.split(",");
        var countryReceiver = getCountry2[getCountry2.length - 1];

        if (countryReceiver.trim() == "TP Hồ Chí Minh" || countryReceiver.trim() == "Hồ Chí Minh" || countryReceiver.trim() == "hồ chí minh") {
            countryReceiver = "Sài Gòn";
        }

        var routename = countrySender + " -" + countryReceiver;

        $.ajax({
            url: "/Home/GetRoutePrice",
            type: "Post",
            async: false,
            data: { RouteName: routename },
            success: function (result) {

                priceRoute = result[0].Price;

            }
        });
        return priceRoute;
    }
    function CalculateFee() {
        var select = document.getElementById("Weigh");
        var options = select.options[select.selectedIndex].text;
        var select1 = document.getElementById("Volume").value;

        var weigh = options.split(" - ");
        var volume = select1.split(" - ");


        $.ajax({
            url: "/Home/CalculateFee",
            type: "Post",
            data: { minVolume: parseFloat(volume[0]), maxVolume: parseFloat(volume[1]) },
            success: function (result) {
                var fee = result.split(" = ");
                var suggestprice = +fee[1].split(",")[0];
                $("#SuggestFee").html("<div class='alert-message warning'>" + "<p>" + "Giá ước tính: " + "<strong>" + suggestprice + "VND" + "</strong>" + "</p>" + "</div>");
                $("#FeeID").val(fee[1][0]);
            }
        });
    }


    function checkStation() {
        var index = 0;

        var dis = [];
        var str = document.getElementById('AddressOfSender').value;
        var sender = str.split(",");

        $.ajax({
            url: "/Home/GetAddressStation",
            contentType: "application/json",
            dataType: "json",
            data: { stationLocation: sender[sender.length - 1] },
            success: function (result) {
                var directionsService = new google.maps.DirectionsService();
                var directionsDisplay = new google.maps.DirectionsRenderer();
                for (var i in result) {
                    var request = {
                        origin: sender + '',
                        destination: result[i].StationLocation + '',
                        travelMode: google.maps.DirectionsTravelMode.DRIVING
                    };

                    (function (record) {
                        directionsService.route(request, function (response, status) {
                            if (status == google.maps.DirectionsStatus.OK) {
                                // Display the distance:
                                if (index < result.length) {
                                    for (var m = 0; m < response.routes[0].legs.length; m++) {
                                        var d = result[index].StationID + ". " + result[index].StationName + " : " + Math.round((response.routes[0].legs[m].distance.value) * 1.609344 / 1000) + " km";
                                        index++;
                                        dis.push(d);
                                    }
                                    directionsDisplay.setDirections(response);
                                    if (record == result.length - 1) {
                                        ShortestDistance(dis);
                                    }
                                }
                            }
                        });
                    })(i);
                }
            }
        });
    }
    function ShortestDistance(dis) {
        var first = dis[0];
        var test = first.split(":");
        var location = test[test.length - 1].split("km")[0];
        var index = 0;
        for (var i = 1; i < dis.length; i++) {
            var station = dis[i].split(":");
            var stationLast = station[station.length - 1].split("km")[0];
            if (parseInt(stationLast, 10) < parseInt(location, 10)) {
                first = dis[i];
                index = i;
            }
        }
        //code here
        $("#shortest").show();
        document.getElementById('shortest').innerHTML = "Trạm gần với vị trí của bạn nhất: <br/>" + first;
        var id = first.split(".")[0];
        document.getElementById("FromLocation").value = id;

    }
    function ToLocation() {
        var index = 0;
        var dis = [];
        var str = document.getElementById('AddressOfReceiver').value;
        var sender = str.split(",");

        $.ajax({
            url: "/Home/GetAddressStation",
            contentType: "application/json",
            dataType: "json",
            data: { stationLocation: sender[sender.length - 1] },
            success: function (result) {

                var directionsService = new google.maps.DirectionsService();
                var directionsDisplay = new google.maps.DirectionsRenderer();

                for (var i in result) {
                    var request = {
                        origin: sender + '',
                        destination: result[i].StationLocation + '',
                        travelMode: google.maps.DirectionsTravelMode.DRIVING
                    };

                    (function (record) {
                        directionsService.route(request, function (response, status) {
                            if (status == google.maps.DirectionsStatus.OK) {
                                // Display the distance:
                                if (index < result.length) {
                                    for (var m = 0; m < response.routes[0].legs.length; m++) {
                                        var d = result[index].StationID + " . " + result[index].StationName + " : " + Math.round((response.routes[0].legs[m].distance.value) * 1.609344 / 1000) + " km";

                                        index++;
                                        dis.push(d);
                                    }
                                    directionsDisplay.setDirections(response);
                                    if (record == result.length - 1) {
                                        ShortestToLocation(dis);
                                    }
                                }
                            }
                        });
                    })(i);
                }
            }
        });
    }
    function ShortestToLocation(dis) {
        var first = dis[0];
        var test = first.split(":");
        var location = test[test.length - 1].split("km")[0];
        var index = 0;
        for (var i = 1; i < dis.length; i++) {
            var station = dis[i].split(":");
            var stationLast = station[station.length - 1].split("km")[0];
            if (parseInt(stationLast, 10) < parseInt(location, 10)) {
                first = dis[i];
                index = i;
            }
        }
        //code here
        $("#shortest").show();
        document.getElementById('shortest').innerHTML = "Trạm gần với vị trí của bạn nhất: <br/>" + first;
        var id = first.split(".")[0];
        document.getElementById("ToLocation").value = id;
    }
    function StationMaker() {
        var address = document.getElementById("AddressOfSender").value;
        $.ajax({
            url: "http://maps.googleapis.com/maps/api/geocode/json?address=" + address + "&sensor=false",
            type: "POST",
            success: function (res) {
                document.getElementById("locaAddress").value = res.results[0].geometry.location.lat + ', ' + res.results[0].geometry.location.lng;
            }
        });
    }
    function ToLocationMaker() {
        var address = document.getElementById("AddressOfReceiver").value;
        $.ajax({
            url: "http://maps.googleapis.com/maps/api/geocode/json?address=" + address + "&sensor=false",
            type: "POST",
            success: function (res) {
                document.getElementById("ToAddress").value = res.results[0].geometry.location.lat + ', ' + res.results[0].geometry.location.lng;
            }
        });
    }
    function GoogleMaker() {
        var str = document.getElementById('AddressOfSender').value;
        var sender = str.split(",");
        var val = document.getElementById("locaAddress").value;
        var commaPos = val.indexOf(',');
        var coordinatesLat = parseFloat(val.substring(0, commaPos));
        var coordinatesLong = parseFloat(val.substring(commaPos + 1, val.length));
        $.ajax({
            url: "/Home/GetAddressStation",
            contentType: "application/json",
            dataType: "json",
            data: { stationLocation: sender[sender.length - 1] },
            success: function (result) {

                $("#description").html("<b>Vị trí các trạm: </b>");
                var map = new google.maps.Map(document.getElementById('map'), {
                    zoom: 10,
                    center: new google.maps.LatLng(coordinatesLat, coordinatesLong),
                    mapTypeId: google.maps.MapTypeId.ROADMAP
                });

                var current = new google.maps.Marker({
                    position: new google.maps.LatLng(coordinatesLat, coordinatesLong),
                    map: map,
                    animation: google.maps.Animation.BOUNCE
                });
                var infowindow = new google.maps.InfoWindow();
                var marker, i;
                for (i in result) {

                    var images = '@Url.Content("~/Content/Images/station.png")';
                    var re = result[i].Coordinate.indexOf(',');
                    var Lat = parseFloat(result[i].Coordinate.substring(0, re));
                    var Long = parseFloat(result[i].Coordinate.substring(re + 1, result[i].Coordinate.length));
                    marker = new google.maps.Marker({
                        position: new google.maps.LatLng(Lat, Long),
                        map: map,
                        animation: google.maps.Animation.DROP,
                        icon: images
                    });

                    google.maps.event.addListener(marker, 'click', (function (marker, i) {
                        return function () {
                            infowindow.setContent(result[i].StationID + " : " + result[i].StationName + ' : ' + result[i].StationLocation);
                            infowindow.open(map, marker);
                        };
                    })(marker, i));
                }
            }
        });
    }
    function MakerLocation() {
        var str = document.getElementById('AddressOfReceiver').value;
        var sender = str.split(",");
        var val = document.getElementById("ToAddress").value;
        var commaPos = val.indexOf(',');
        var coordinatesLat = parseFloat(val.substring(0, commaPos));
        var coordinatesLong = parseFloat(val.substring(commaPos + 1, val.length));
        $.ajax({
            url: "/Home/GetAddressStation",
            contentType: "application/json",
            dataType: "json",
            data: { stationLocation: sender[sender.length - 1] },
            success: function (result) {
                $("#description").html("<b>Vị trí các trạm: </b>");
                var map = new google.maps.Map(document.getElementById('map'), {
                    zoom: 10,
                    center: new google.maps.LatLng(coordinatesLat, coordinatesLong),
                    mapTypeId: google.maps.MapTypeId.ROADMAP
                });

                var current = new google.maps.Marker({
                    position: new google.maps.LatLng(coordinatesLat, coordinatesLong),
                    map: map,
                    animation: google.maps.Animation.BOUNCE
                });
                var infowindow = new google.maps.InfoWindow();
                var marker, i;
                for (i in result) {
                    var images = '@Url.Content("~/Content/Images/station.png")';
                    var re = result[i].Coordinate.indexOf(',');
                    var Lat = parseFloat(result[i].Coordinate.substring(0, re));
                    var Long = parseFloat(result[i].Coordinate.substring(re + 1, result[i].Coordinate.length));
                    marker = new google.maps.Marker({
                        position: new google.maps.LatLng(Lat, Long),
                        map: map,
                        animation: google.maps.Animation.DROP,
                        icon: images
                    });

                    google.maps.event.addListener(marker, 'click', (function (marker, i) {
                        return function () {
                            infowindow.setContent(result[i].StationID + " : " + result[i].StationName + ' : ' + result[i].StationLocation);
                            infowindow.open(map, marker);
                        };
                    })(marker, i));
                }
            }
        });
    }

</script>

