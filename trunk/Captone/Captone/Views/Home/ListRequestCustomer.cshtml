@model IEnumerable<Captone.Models.Request>
<script src="~/Content/js/demo/demo.js"></script>
<div class="table-responsive" id="requestList">
    <table class="table">
        <tr>
            <th>Địa chỉ người gửi
            </th>
            <th>Tên người nhận
            </th>
            <th>Địa chỉ người nhận
            </th>
            <th>Ngày gửi
            </th>
            <th>Trạng thái
            </th>
            <th></th>
            <th></th>
        </tr>

        @foreach (var item in Model)
        {
            
            <tr id="requestCustomer-@item.RequestID">
                <td>
                    @item.SenderAddress
                </td>
                <td>
                    @item.ReceiverName
                </td>
                <td>
                    @item.ReceiverAddress
                </td>
                <td>
                    @item.DateRequest
                </td>
                <td>
                    @item.DeliveryStatu.StatusName
                </td>
                @if (item.DeliveryStatusID == 1)
                {
                    <td>
                        <input type="button" id="@item.RequestID" class="btn" value="Xóa yêu cầu" onclick="DeleteRequest(this.id);"/>
                    </td>
                }
                @if (item.DeliveryStatusID == 4)
                {
                    <td>
                        <ul id="inline-popups" class="abc">
                            <a href="#test-popup" data-effect="mfp-newspaper" id="@item.RequestID" role="button" onclick="ListTripTracking();">Tracking</a>
                        </ul>
                    </td>    
                }

            </tr>
        }

    </table>
    <div id="test-popup" class="white-popup mfp-with-anim mfp-hide">
       
    </div>
</div>
<script type="text/javascript">
    $('#inline-popups').magnificPopup({
        delegate: 'a',
        removalDelay: 300, //delay removal by X to allow out-animation
        callbacks: {
            beforeOpen: function () {
                this.st.mainClass = this.st.el.attr('data-effect');
            }
        },
        midClick: true // allow opening popup on middle mouse click. Always set it to true if you don't provide alternative source.
    });
    function ListTripTracking() {
        var id = $("ul.abc a").attr("id");
        $.ajax({
            url: "/Home/ListTripTracking",
            type:"POST",
            data: { requestId: id },
            success: function (result) {
                $("#test-popup").html(result);
                Tracking(id);
            }
        });
    }
    function Tracking(id) {
        var idT = document.getElementsByName("" + id);
        var waypoints = [];
        var Point = [];
        var startPoint;
        var endPoint;
        var timeWaypoints;
        var timeEndPoint;
        
        var DrivePath = [];
        var Colors = ["#FFFF00", "#00FF00", "#0000FF", "#FFFFFF", "#000000", "#FFFF00", "#00FFFF", "#FF00FF"];
        for (var i = 0; i < idT.length; i++) {
            if (idT.length) {
                var route = idT[i].value.split(" - ");
                Point.push(route);
                // allRoute.push(route);
            }
        }
        if (Point.length > 1) {
            var get = Point[0];
            startPoint = get[0].split(",")[0];
                for (var j = 0; j < Point.length; j++)
                {
                    var coms = Point[j];
                    var cms = coms[coms.length - 1].split(",");
                    var address = cms[0];
                    timeWaypoints = cms[cms.length - 1];
                    if(address !=="") {
                        waypoints.push({
                            location: address,
                            stopover: true
                        });
                    }
                }
                var set = Point[Point.length - 1];
            var tmd = set[set.length - 1].split(",");
            endPoint = tmd[0];
            timeEndPoint = tmd[tmd.length - 1];
        }
        if(Point.length == 1) {
           var index = Point[0];
           startPoint = index[0].split(",")[0];
            endPoint = index[0].split(",").length - 1;
        }
        var myOptions = {
            zoom: 7,
            mapTypeId: google.maps.MapTypeId.ROADMAP
        };
        var map = new google.maps.Map(document.getElementById("map1"), myOptions);

        var directionsService = new google.maps.DirectionsService();
        var directionsDisplay = new google.maps.DirectionsRenderer();
        directionsDisplay.setMap(map);
        var d = new Date();
        var current = d.getHours() + ":" + d.getMinutes() + ":" + d.getSeconds();
        
            var request = {
                origin: startPoint+ "",
                destination: endPoint + "",
                waypoints: waypoints,
                optimizeWaypoints: true,
                travelMode: google.maps.DirectionsTravelMode.DRIVING
            };
            getLong(startPoint);
            for (var u = 0; u < waypoints.length; u++)
        {
                getLong(waypoints[u].location);
            }
        alert(DrivePath[0]);
            directionsService.route(request, function(response, status) {
                if (status == google.maps.DirectionsStatus.OK) {
                    //directionsDisplay.setDirections(response);
             
                    if (timeWaypoints < current) {
                    
                        for (var i = 0; i < DrivePath.length; i++){
                            var PathStyle = new google.maps.Polyline({
                                path: [DrivePath[i], DrivePath[i+1]],
                                strokeColor: Colors[0],
                                strokeOpacity: 1.0,
                                strokeWeight: 2,
                                map: map
                            });
                            PathStyle.setMap(map);
                            
                        }
                }
                }
            });
        
        function getLong(address) {
            $.ajax({
                url: "http://maps.googleapis.com/maps/api/geocode/json?address=" + address + "&sensor=false",
                type: "POST",
                success: function (res) {
                    DrivePath.push(res.results[0].geometry.location.lat + ', ' + res.results[0].geometry.location.lng);
                }
            });
        }
    }
    

    function DeleteRequest(id) {
        $.ajax({
            url: "/Home/DeleteRequest",
            type: "Post",
            data: { requestId: id },
            success: function (result) {
                if (result) {
                    $("#requestCustomer-" + id).fadeOut(200, function () {
                        $("#requestCustomer-" + id).remove();
                        $("#requestCustomer-" + id).fadeIn(200);
                    });
                }
            }
        });
    }

</script>
